"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
/**
 * ConfigBuilder class for creating the immutable Config.
 */
class ConfigBuilder {
    constructor() {
        this._libraries = ["*"];
        this._backtrace = "accurate";
        this._includeExports = [];
        this._excludeExports = [];
        this._env = true;
        this._vm = true;
    }
    /**
     * A list of libraries that the jnitrace engine should trace.
     */
    set libraries(libraries) {
        this._libraries = libraries;
    }
    /**
     * Get the list of libraries that the jnitrace engine should be tracing.
     */
    get libraries() {
        return this._libraries;
    }
    /**
     * Set the Frida backtrace method that the jnitrace engine should use.
     */
    set backtrace(backtrace) {
        if (["fuzzy", "accurate", "none"].includes(backtrace)) {
            this._backtrace = backtrace;
        }
        else {
            throw new Error("Backtracer value must be one of the following, [fuzzy, accurate, none].");
        }
    }
    /**
     * Get the Frida backtrace method that the jnitrace engine should use.
     */
    get backtrace() {
        return this._backtrace;
    }
    /**
     * Set the list of exports that the jnitrace engine should trace.
     */
    set includeExports(exports) {
        this._includeExports = exports;
    }
    /**
     * Get the list of exports that the jnitrace engine should trace.
     */
    get includeExports() {
        return this._includeExports;
    }
    /**
     * Set the list of exports that the jnitrace engine should not trace.
     */
    set excludeExports(exports) {
        this._excludeExports = exports;
    }
    /**
     * Get the list of exports that the jnitrace engine should not tracqe.
     */
    get excludeExports() {
        return this._excludeExports;
    }
    /**
     * Set whether the jnitrace engine should or should not trace JNIEnv struct
     * method calls.
     */
    set env(env) {
        this._env = env;
    }
    /**
     * Get whether the jnitrace engine should or should not trace JNIEnv struct
     * method calls.
     */
    get env() {
        return this._env;
    }
    /**
     * Set whether the jnitrace engine should or should not trace JavaVM struct
     * method calls.
     */
    set vm(vm) {
        this._vm = vm;
    }
    /**
     * Get whether the jnitrace engine should or should not trace JavaVM struct
     * method calls.
     */
    get vm() {
        return this._vm;
    }
    /**
     * Build the Config to be used by the jnitrace engine.
     */
    build() {
        return config_1.Config.getInstance(this);
    }
}
exports.ConfigBuilder = ConfigBuilder;

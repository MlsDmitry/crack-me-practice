import { ConfigBuilder } from "./config_builder";
/**
 * Config class to store options for the JNIInterception engine to use.
 */
declare class Config {
    private static instance;
    private readonly _libraries;
    private readonly _backtrace;
    private readonly _includeExport;
    private readonly _excludeExport;
    private readonly _env;
    private readonly _vm;
    private _hostInitialised;
    private constructor();
    /**
     * Get a list of libraries the the JNIInterceptor is attempting to trace.
     */
    get libraries(): string[];
    /**
     * Get the type of backtrace that the JNIInterceptor should be using for
     * backtraces.
     */
    get backtrace(): string;
    /**
     * Get a list of the exports that the jnitrace engine should be
     * intercepting.
     */
    get includeExport(): string[];
    /**
     * Get a list of the exports that the jnitrace engine should not be
     * intercepting.
     */
    get excludeExport(): string[];
    /**
     * Get whether the jnitrace engine should be tracing the whole JNIEnv
     * struct.
     */
    get env(): boolean;
    /**
     * Get whether the jnitrace engine should be tracing the whole JavaVM
     * struct.
     */
    get vm(): boolean;
    /**
     * Returns if the Config has been initialised.
     */
    static initialised(): boolean;
    /**
     * Gets an instance of the Config.
     *
     * @param builder - an optional builder if the Config needs to be rebuilt.
     */
    static getInstance(builder?: ConfigBuilder): Config;
}
export { Config };

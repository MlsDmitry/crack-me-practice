"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_builder_1 = require("./config_builder");
/**
 * Config class to store options for the JNIInterception engine to use.
 */
class Config {
    constructor(builder) {
        this._libraries = builder.libraries;
        this._backtrace = builder.backtrace;
        this._includeExport = builder.includeExports;
        this._excludeExport = builder.excludeExports;
        this._env = builder.env;
        this._vm = builder.vm;
        this._hostInitialised = false;
    }
    /**
     * Get a list of libraries the the JNIInterceptor is attempting to trace.
     */
    get libraries() {
        return this._libraries;
    }
    /**
     * Get the type of backtrace that the JNIInterceptor should be using for
     * backtraces.
     */
    get backtrace() {
        return this._backtrace;
    }
    /**
     * Get a list of the exports that the jnitrace engine should be
     * intercepting.
     */
    get includeExport() {
        return this._includeExport;
    }
    /**
     * Get a list of the exports that the jnitrace engine should not be
     * intercepting.
     */
    get excludeExport() {
        return this._excludeExport;
    }
    /**
     * Get whether the jnitrace engine should be tracing the whole JNIEnv
     * struct.
     */
    get env() {
        return this._env;
    }
    /**
     * Get whether the jnitrace engine should be tracing the whole JavaVM
     * struct.
     */
    get vm() {
        return this._vm;
    }
    /**
     * Returns if the Config has been initialised.
     */
    static initialised() {
        if (Config.instance === undefined) {
            return false;
        }
        else {
            return Config.instance._hostInitialised;
        }
    }
    /**
     * Gets an instance of the Config.
     *
     * @param builder - an optional builder if the Config needs to be rebuilt.
     */
    static getInstance(builder) {
        if (builder !== undefined) {
            Config.instance = new Config(builder);
            Config.instance._hostInitialised = true;
        }
        else if (Config.instance === undefined) {
            Config.instance = new Config(new config_builder_1.ConfigBuilder());
        }
        return Config.instance;
    }
}
exports.Config = Config;

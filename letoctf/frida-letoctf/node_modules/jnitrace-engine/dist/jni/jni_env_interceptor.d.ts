/// <reference types="frida-gum" />
import { JNIThreadManager } from "./jni_thread_manager";
import { JavaVMInterceptor } from "./java_vm_interceptor";
import { ReferenceManager } from "../utils/reference_manager";
import { JavaMethod } from "../utils/java_method";
import { JNICallbackManager } from "../internal/jni_callback_manager";
declare abstract class JNIEnvInterceptor {
    protected references: ReferenceManager;
    protected threads: JNIThreadManager;
    protected callbackManager: JNICallbackManager;
    protected javaVMInterceptor: JavaVMInterceptor | null;
    protected shadowJNIEnv: NativePointer;
    protected methods: Map<string, JavaMethod>;
    protected fastMethodLookup: Map<string, NativeCallback>;
    protected vaArgsBacktraces: Map<number, NativePointer[]>;
    constructor(references: ReferenceManager, threads: JNIThreadManager, callbackManager: JNICallbackManager);
    isInitialised(): boolean;
    get(): NativePointer;
    create(): NativePointer;
    setJavaVMInterceptor(javaVMInterceptor: JavaVMInterceptor): void;
    createStubFunction(): NativeCallback;
    protected createJNIVarArgIntercept(id: number, methodPtr: NativePointer): NativePointer;
    private addJavaArgsForJNIIntercept;
    private handleGetMethodResult;
    private handleGetJavaVM;
    private handleRegisterNatives;
    private handleJNIInterceptResult;
    private createJNIIntercept;
    private createJNIVarArgMainCallback;
    private createJNIVarArgInitialCallback;
    private readValue;
    protected abstract buildVaArgParserShellcode(text: NativePointer, data: NativePointer, parser: NativeCallback): void;
    protected abstract setUpVaListArgExtract(vaList: NativePointer): void;
    protected abstract extractVaListArgValue(method: JavaMethod, index: number): NativePointer;
    protected abstract resetVaListArgExtract(): void;
}
export { JNIEnvInterceptor };

/// <reference types="frida-gum" />
import { Config } from "./utils/config";
import { ConfigBuilder } from "./utils/config_builder";
import { JNIMethod } from "./jni/jni_method";
import { JavaMethod } from "./utils/java_method";
/**
 * Callback type for JNI API call events.
 */
interface JNIInvocationCallback {
    /**
     * Called whenever a JNI API call is about to run. Arguments to that JNI API
     * call can be modified by replacing values in the `args` array.
     */
    onEnter?: (this: JNIInvocationContext, args: NativeArgumentValue[]) => void;
    /**
     * Called immediately after a JNI API has run. The return value from that
     * function can be changed by using JNINativeReturnValue#replace on the
     * retval.
     */
    onLeave?: (this: JNIInvocationContext, retval: JNINativeReturnValue) => void;
}
/**
 * Callback for whenever a native library is loaded.
 */
interface JNILibraryCallback {
    /**
     * Called when a library is loaded.
     */
    onLoaded?: (library: string) => void;
}
/**
 * Context for a JNI API call.
 */
interface JNIInvocationContext {
    /**
     * User defined values.
     */
    [x: string]: any;
    /**
     * Backtrace as a list of NativePointers.
     */
    backtrace?: NativePointer[];
    /**
     * Id of the thread the JNI API was made from.
     */
    threadId: ThreadId;
    /**
     * Address in memory of the actual JNI API call.
     */
    jniAddress: NativePointer;
    /**
     * Definition of the JNI method.
     */
    methodDef: JNIMethod;
    /**
     * Definition of the Java method. If the function was a "Call" method.
     */
    javaMethod?: JavaMethod;
}
/**
 * Wrapper class for return values from a traced JNI API call.
 */
declare class JNINativeReturnValue {
    private value;
    constructor(value: NativeReturnValue);
    /**
     * Get the return value of the JNI call.
     */
    get(): NativeReturnValue;
    /**
     * Replace the value returned by the JNI API call. Using replace
     * will change the return of the callee to the provided value.
     *
     * @param value - the new value that should be returned
     */
    replace(value: NativeReturnValue): void;
}
/**
 * Listener on a JNI API intercept. Allows that intercept to later
 * be stopped.
 */
declare class JNIInvocationListener {
    private readonly callbacks;
    private readonly method;
    constructor(callbacks: Map<string, JNIInvocationCallback>, method: string);
    /**
     * Detatch the JNI API intercept.
     */
    detach(): void;
}
/**
 * Intercepts JNI API calls through the Frida Interceptor. This module is
 * designed to mirror closely the syntax and semantics of the Frida
 * Interceptor.
 */
declare namespace JNIInterceptor {
    /**
     * Intercepts calls to the given JNI API `method`. This method must be the
     * name of the a method in either the JNIEnv struct or the JavaVM struct.
     *
     *
     * @param method - name of the JNI method to intercept
     * @param callback - a callback with an onEnter and/or onLeave
     * @returns a listener object to detach the intercept
     */
    function attach(method: string, callback: JNIInvocationCallback): JNIInvocationListener;
    /**
     * Detatch all current JNIIntercepts.
     */
    function detatchAll(): void;
}
declare namespace JNILibraryWatcher {
    /**
     * Set a callback to listen to new library loaded events. The callback
     * will be triggered whenever a new library load is detected by JNI trace.
     * The callback will provide the full path to the library being loaded.
     *
     * @param callback - the listener for library load events
     */
    function setCallback(cb: JNILibraryCallback): void;
    function doCallback(library: string): void;
}
export { JNIInterceptor, JNILibraryWatcher, JNINativeReturnValue, JNIInvocationCallback, JNIInvocationListener, JNIInvocationContext, Config, ConfigBuilder, JNIMethod, JavaMethod };
